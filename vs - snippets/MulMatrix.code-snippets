{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "mulMatrix",
		"body": [

"struct MulMatrix {",
"",
"	vector<vector<ll>> mulMatrix(vector<vector<ll>> a, vector<vector<ll>> b, ll n, ll m, ll p) {",
"",
"		vector<vector<ll>> res;",
"		res.resize(n);",
"		for (int i = 0; i < n; i++)",
"			res[i].resize(p, 0);",
"",
"		for (int i = 0; i < n; i++)",
"			for (int j = 0; j < p; j++)",
"				for (int k = 0; k < m; k++)",
"					(res[i][j] += a[i][k] * b[k][j]) %= mod;",
"",
"		return res;",
"",
"	}",
"",
"	vector<vector<ll>> powMatrix(vector<vector<ll>> a, ll n, ll sz, vector<vector<ll>> & b) {",
"",
"		vector<vector<ll>> res;",
"		res.resize(sz);",
"		for (int i = 0; i < sz; i++)",
"			res[i].resize(sz, 0);",
"",
"		if (n == 0) {",
"",
"			for (int i = 0; i < sz; i++)",
"				res[i][0] = 1;",
"			return res;",
"",
"		}",
"",
"		if (n == 1) {",
"",
"			return b;",
"",
"		}",
"",
"		res = powMatrix(a, n / 2ll, sz, b);",
"		res = mulMatrix(res, res, sz, sz, sz);",
"		if (n % 2)",
"			res = mulMatrix(res, b, sz, sz, sz);",
"",
"		return res;",
"",
"	}",
"",
"} Matrix;",

		],
		"description": "Log output to console"
	}
}