{
	"FILE CB": {
	"scope": "",
	"prefix": "2sat",
	"body": [
"struct TwoSat {",
"",
"    vector<int> edge[N], edgeT[N];",
"",
"    void addEdge(char cu, int u, char cv, int v) {",
"",
"        u += (cu == '-' ? m : 0);",
"        v += (cv == '-' ? m : 0);",
"        int nu = (u <= m ? u + m : u - m);",
"        int nv = (v <= m ? v + m : v - m);",
"        edge[nu].push_back(v);",
"        edge[nv].push_back(u);",
"        edgeT[v].push_back(nu);",
"        edgeT[u].push_back(nv);",
"",
"    }",
"",
"    vector<int> topo;",
"    bool visited[N];",
"    int id[N];",
"",
"    void dfs(int u) {",
"",
"        visited[u] = 1;",
"",
"        for (int x : edge[u])",
"            if (!visited[x])",
"                dfs(x);",
"        ",
"        topo.push_back(u);",
"",
"    }",
"",
"    void scc(int u, int idScc) {",
"",
"        visited[u] = true;",
"        id[u] = idScc;",
"",
"        for (int x : edgeT[u])",
"            if (!visited[x])",
"                scc(x, idScc);",
"",
"    }",
"",
"    vector<char> ans;",
"",
"    bool process() {",
"",
"        memset(visited, 0, sizeof(visited));",
"        ",
"        for (int i = 1; i <= 2 * m; i++)",
"            if (!visited[i])    ",
"                dfs(i);",
"",
"        reverse(topo.begin(), topo.end());",
"",
"        int idScc = 0;",
"        memset(visited, 0, sizeof(visited));",
"        for (int x : topo)",
"            if (!visited[x])",
"                scc(x, ++idScc);",
"",
"        for (int i = 1; i <= m; i++)",
"            if (id[i] == id[i + m])",
"                return false;",
"",
"        for (int i = 1; i <= m; i++)",
"            if (id[i] > id[i + m])",
"                ans.push_back('+');",
"            else ",
"                ans.push_back('-');",
"",
"        return true;",
"",
"    }",
"",
"} twoSat;",

	],
	"description": "template"
	}
}