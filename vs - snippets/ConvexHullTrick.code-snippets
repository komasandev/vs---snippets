{
	"FILE CB": {
	"scope": "",
	"prefix": "convexhulltrick",
	"body": [
"// #include <ext/pb_ds/assoc_container.hpp>",
"#include<bits/stdc++.h>",
"",
"// using namespace __gnu_pbds;",
"using namespace std;",
"",
"// #define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>",
"#define            fi first",
"#define            se second",
"#define            db double",
"#define            ll long long",
"#define           ull unsigned long long",
"#define           ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);",
"#define     inpout(a) freopen(a".inp","r",stdin),freopen(a".out","w",stdout)",
"#define           int ll",
"",
"template<class A,class B> inline void maximize(A& x, B y) {x = max(x, y);};",
"template<class A,class B> inline void minimize(A& x, B y) {x = min(x, y);};",
"",
"const long long INF = 1e15;",
"const long long mod = 1e9 + 7;",
"const int N = 2e5 + 100;",
"",
"//int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1};",
"//int dy[8] = {-1, 1, 0, 0, -1, 1, -1, 1};",
"",
"struct line {",
"",
"    int a, b;",
"",
"};",
"",
"int n, dp[N], p[N], q[N], k;",
"pair<int, int> d[N];",
"long double x[N];",
"",
"bool check(int i) {",
"",
"    if (d[i + 1].se == p[k]) ",
"        return false;",
"",
"    // cout << dp[i] << ' ' << q[k - 1] << ' ' << p[k] << ' ' << d[i + 1].se << '\n';",
"    long double M = (long double)(dp[i] - q[k]) / (p[k] - d[i + 1].se);",
"    long double N = (long double)(dp[i] - q[k - 1]) / (p[k - 1] - d[i + 1].se);",
"    return (N < M);",
"",
"}",
"",
"void komasan() {",
"",
"    cin >> n;",
"    for (int i = 1; i <= n; i++)",
"        cin >> d[i].fi >> d[i].se;",
"",
"    int wmax = 0;",
"    int cnt = 0;",
"    sort(d + 1, d + n + 1, greater());",
"    for (int i = 1; i <= n; i++)",
"        if (d[i].se > wmax) {",
"",
"            wmax = d[i].se;",
"            d[++cnt] = d[i];",
"",
"        }",
"",
"    reverse(d + 1, d + cnt + 1);",
"",
"    n = cnt;",
"    ",
"    dp[0] = 0;",
"    x[0] = -INF;",
"    int j = 0;",
"    p[0] = d[1].se;",
"    q[0] = 0;",
"",
"    for (int i = 1; i <= n; i++) {",
"",
"        while (j <= k && x[j] <= d[i].fi) j++;",
"        j--;",
"",
"        dp[i] = q[j] + p[j] * d[i].fi;",
"        if (d[i + 1].se == p[k] && dp[i] >= q[k]) continue;",
"",
"        while (k > 0 && !check(i)) k--;",
"        k++;",
"        p[k] = d[i + 1].se;",
"        q[k] = dp[i];",
"        x[k] = (long double)(q[k - 1] - q[k]) / (p[k] - p[k - 1]);",
"",
"    }",
"",
"    cout << dp[n];",
"",
"}",
"",
"int32_t main() {",
"    ios;",
"    //inpout("");",
"    komasan();",
"",
"}",
"",
"// dp[i] = dp[j - 1] + d[j].se * d[i].fi",
],
"description": "template"
}
}