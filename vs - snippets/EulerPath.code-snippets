{
	"FILE CB": {
	"scope": "",
	"prefix": "eulerPath",
	"body": [
"// #include <ext/pb_ds/assoc_container.hpp>",
"#include <bits/stdc++.h>",
"",
"// using namespace __gnu_pbds;",
"using namespace std;",
"",
"// #define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>",
"#define fi first",
"#define se second",
"#define db double",
"#define ll long long",
"#define ull unsigned long long",
"#define ios                       \",
"    ios_base::sync_with_stdio(0); \",
"    cin.tie(0);                   \",
"    cout.tie(0);",
"#define inpout(a) freopen(a ".inp", "r", stdin), freopen(a ".out", "w", stdout)",
"",
"template <class A, class B>",
"inline void maximize(A& x, B y) {",
"    x = max(x, y);",
"};",
"template <class A, class B>",
"inline void minimize(A& x, B y) {",
"    x = min(x, y);",
"};",
"",
"const long long INF = 1e18;",
"const long long mod = 1e9 + 7;",
"const int N = 2e5 + 100;",
"",
"// int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1};",
"// int dy[8] = {-1, 1, 0, 0, -1, 1, -1, 1};",
"",
"int n, m, deg[N];",
"multiset<int> edge[N];",
"",
"void eulerFind(int u) {",
"    vector<int> E;",
"    vector<int> D;",
"    D.push_back(u);",
"    while (D.size()) {",
"        int u = D.back();",
"        if (edge[u].empty()) {",
"            E.push_back(u);",
"            D.pop_back();",
"            continue;",
"        }",
"",
"        int x = *edge[u].begin();",
"        edge[u].erase(edge[u].lower_bound(x));",
"        edge[x].erase(edge[x].lower_bound(u));",
"        D.push_back(x);",
"    }",
"",
"    while (E.size()) cout << E.back() << ' ', E.pop_back();",
"}",
"",
"void komasan() {",
"    cin >> n >> m;",
"    for (int i = 1; i <= m; i++) {",
"        int u, v;",
"        cin >> u >> v;",
"        edge[u].insert(v);",
"        edge[v].insert(u);",
"        deg[u]++;",
"        deg[v]++;",
"    }",
"",
"    int cnt = 0;",
"    for (int i = 1; i <= n; i++) cnt += deg[i] % 2;",
"",
"    if (cnt > 2) {",
"        cout << '-1';",
"        return;",
"    }",
"",
"    int Start = 0;",
"    for (int i = 1; i <= n; i++)",
"        if (deg[i] % 2)",
"            Start = i;",
"",
"    eulerFind(max(Start, 1));",
"}",
"",
"int main() {",
"    ios;",
"    // inpout("");",
"    komasan();",
"}",

],
"description": "template"
}
}